{"ast":null,"code":"var _jsxFileName = \"/Users/jinzo/Desktop/projects/StrangerThings/src/components/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router';\nimport { callApi } from '../util/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cohortName = '2108-ECE-RM-WEB-PT';\nconst APIURL = `https://strangers-things.herokuapp.com/api/${cohortName}`;\n\nconst Register = _ref => {\n  _s();\n\n  let {\n    setToken,\n    setUsers\n  } = _ref;\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login/Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async event => {\n        event.preventDefault();\n        const respObj = await callApi({\n          url: `/users/register`,\n          method: 'POST',\n          body: {\n            user: {\n              username,\n              password\n            }\n          }\n        });\n        console.log(respObj);\n\n        if (respObj.data) {\n          const userResp = await callApi({\n            url: '/users/me',\n            token: respObj.data.token\n          });\n          console.log(userResp.data.username);\n          setToken(respObj.data.token);\n          setUsers(userResp.data.username);\n\n          if (respObj.data.token) {\n            navigate('/profile');\n          }\n        } // const response = await fetch(`${APIURL}/users/register`, {\n        //     method: \"POST\",\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        //     },\n        //     body: JSON.stringify({\n        //         user:{\n        //             username,\n        //             password\n        //         }\n        //     })\n        // })\n        // .catch(console.error);\n        // const responseObj = await response.json();\n        // console.log(responseObj)\n        // setToken(responseObj.data.token)\n        // console.log(setToken)\n\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"username\",\n        value: username,\n        onChange: event => setUsername(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"password\",\n        value: password,\n        onChange: event => setPassword(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Register, \"z+4ZjZgef9yfPF00ZCUTjY+rvUU=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/jinzo/Desktop/projects/StrangerThings/src/components/Register.js"],"names":["React","useState","useParams","useNavigate","callApi","cohortName","APIURL","Register","setToken","setUsers","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","navigate","event","preventDefault","respObj","url","method","body","user","console","log","data","userResp","token","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,SAAT,EAAmBC,WAAnB,QAAsC,cAAtC;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAGA,MAAMC,UAAU,GAAG,oBAAnB;AACA,MAAMC,MAAM,GAAI,8CAA6CD,UAAW,EAAxE;;AAEA,MAAME,QAAQ,GAAG,QAAyB;AAAA;;AAAA,MAAxB;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAwB;AACtC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAMe,QAAQ,GAAGb,WAAW,EAA5B;AAEA,sBAAO;AAAA,4BAKX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALW,eAOX;AAAM,MAAA,QAAQ,EAAE,MAAMc,KAAN,IAAe;AACvBA,QAAAA,KAAK,CAACC,cAAN;AACA,cAAMC,OAAO,GAAG,MAAMf,OAAO,CAAC;AAC1BgB,UAAAA,GAAG,EAAG,iBADoB;AAE1BC,UAAAA,MAAM,EAAE,MAFkB;AAG1BC,UAAAA,IAAI,EAAC;AACDC,YAAAA,IAAI,EAAE;AACFb,cAAAA,QADE;AAEFE,cAAAA;AAFE;AADL;AAHqB,SAAD,CAA7B;AAUAY,QAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;;AACJ,YAAGA,OAAO,CAACO,IAAX,EAAgB;AACZ,gBAAMC,QAAQ,GAAG,MAAMvB,OAAO,CAAC;AAACgB,YAAAA,GAAG,EAAE,WAAN;AAAmBQ,YAAAA,KAAK,EAAET,OAAO,CAACO,IAAR,CAAaE;AAAvC,WAAD,CAA9B;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAYE,QAAQ,CAACD,IAAT,CAAchB,QAA1B;AACAF,UAAAA,QAAQ,CAACW,OAAO,CAACO,IAAR,CAAaE,KAAd,CAAR;AACAnB,UAAAA,QAAQ,CAACkB,QAAQ,CAACD,IAAT,CAAchB,QAAf,CAAR;;AACA,cAAIS,OAAO,CAACO,IAAR,CAAaE,KAAjB,EAAuB;AACnBZ,YAAAA,QAAQ,CAAC,UAAD,CAAR;AACH;AACJ,SArB0B,CAsBvB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEH,OAzCL;AAAA,8BA0CQ;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,UAA/B;AAA0C,QAAA,KAAK,EAAEN,QAAjD;AACA,QAAA,QAAQ,EAAGO,KAAD,IAAWN,WAAW,CAACM,KAAK,CAACY,MAAN,CAAaC,KAAd;AADhC;AAAA;AAAA;AAAA;AAAA,cA1CR,eA4CQ;AAAA;AAAA;AAAA;AAAA,cA5CR,eA8CQ;AAAO,QAAA,IAAI,EAAE,MAAb;AAAoB,QAAA,WAAW,EAAG,UAAlC;AAA6C,QAAA,KAAK,EAAElB,QAApD;AACA,QAAA,QAAQ,EAAIK,KAAD,IAAWJ,WAAW,CAACI,KAAK,CAACY,MAAN,CAAaC,KAAd;AADjC;AAAA;AAAA;AAAA;AAAA,cA9CR,eAgDQ;AAAA;AAAA;AAAA;AAAA,cAhDR,eAmDQ;AAAQ,QAAA,IAAI,EAAE,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnDR;AAAA;AAAA;AAAA;AAAA;AAAA,YAPW;AAAA,kBAAP;AA6DH,CAnED;;GAAMvB,Q;UAIeJ,W;;;KAJfI,Q;AAqEN,eAAeA,QAAf","sourcesContent":["import React, {useState} from 'react';\nimport { useParams,useNavigate } from 'react-router';\nimport { callApi } from '../util/api';\n\n\nconst cohortName = '2108-ECE-RM-WEB-PT';\nconst APIURL = `https://strangers-things.herokuapp.com/api/${cohortName}`;\n\nconst Register = ({setToken, setUsers}) =>{\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const navigate = useNavigate();\n\n    return <>\n\n{/* Make it so my password and confirm password have to be equal in order for them to register.  */}\n\n\n<h1>Login/Register</h1>\n\n<form onSubmit={async(event) =>{\n        event.preventDefault();\n        const respObj = await callApi({\n            url: `/users/register`,\n            method: 'POST',\n            body:{\n                user: {\n                    username,\n                    password\n                }\n            }\n        })\n        console.log(respObj)\n    if(respObj.data){\n        const userResp = await callApi({url: '/users/me', token: respObj.data.token})\n        console.log(userResp.data.username)\n        setToken(respObj.data.token);\n        setUsers(userResp.data.username);\n        if (respObj.data.token){\n            navigate('/profile')\n        }\n    }\n        // const response = await fetch(`${APIURL}/users/register`, {\n        //     method: \"POST\",\n        //     headers: {\n        //         'Content-Type': 'application/json',\n        \n        //     },\n        //     body: JSON.stringify({\n        //         user:{\n        //             username,\n        //             password\n        //         }\n        //     })\n        // })\n        // .catch(console.error);\n        // const responseObj = await response.json();\n        // console.log(responseObj)\n        // setToken(responseObj.data.token)\n        // console.log(setToken)\n        \n    }}>\n        <input type=\"text\" placeholder=\"username\" value={username} \n        onChange={(event) => setUsername(event.target.value)}></input>\n        <hr></hr>\n\n        <input type= \"text\" placeholder = \"password\" value={password} \n        onChange ={(event) => setPassword(event.target.value)}></input>\n        <hr></hr>\n        {/* <input type= \"text\" placeholder = \"confirm password\" value={confirmPassword} \n        onChange ={(event) => setConfirmPassword(event.target.value)}></input> */}\n        <button type =\"submit\" >Submit</button>\n    </form>\n    </>\n}\n\nexport default Register;    \n   \n"]},"metadata":{},"sourceType":"module"}